import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import json
import os
import httpx
from typing import AsyncIterator
import requests

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
# TODO: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API
BOT_TOKEN = "8220896552:AAFqZ28ylYmItLQLmQHOqTGWDCRtbSLwD5U"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Flexar API
FLEXAR_BASE_URL = "https://app.flexar.al"  # TODO: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
FLEXAR_API_KEY = "your_flexar_api_key_here"  # TODO: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á
FLEXAR_CHAT_NAME = "MovieRecommendationBot"  # TODO: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ –≤ Flexar
FLEXAR_AGENT_ID = "your_agent_id_here"  # TODO: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–≥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤

bot = telebot.TeleBot(BOT_TOKEN)

# ==================== –ö–õ–ê–°–°–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° API ====================

class FlexarAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Flexar"""
    
    def __init__(self):
        self.base_url = f"{FLEXAR_BASE_URL.rstrip('/')}/api/v1"
        self.headers = {
            "Authorization": f"Bearer {FLEXAR_API_KEY}",
            "Content-Type": "application/json"
        }
    
    async def get_chat_id(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç ID —á–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ –≥–∞–π–¥—É - —à–∞–≥ 1 –¥–ª—è —á–∞—Ç–æ–≤
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/chats",
                    params={"name": FLEXAR_CHAT_NAME},
                    headers=self.headers
                )
                response.raise_for_status()
                data = response.json()
                
                if data.get("code") == 0 and data.get("data"):
                    return data["data"][0]["id"]
                else:
                    raise Exception("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id: {e}")
            return ""
    
    async def create_session(self, chat_id: str, session_name: str = "Telegram Session") -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ –≥–∞–π–¥—É - —à–∞–≥ 2 –¥–ª—è —á–∞—Ç–æ–≤
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.base_url}/chats/{chat_id}/sessions",
                    json={"name": session_name},
                    headers=self.headers
                )
                response.raise_for_status()
                data = response.json()
                
                if data.get("code") == 0 and data.get("data"):
                    return data["data"]["id"]
                else:
                    raise Exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return ""
    
    async def ask_question_stream(self, chat_id: str, session_id: str, question: str) -> str:
        """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ –≥–∞–π–¥—É - —à–∞–≥ 3 –¥–ª—è —á–∞—Ç–æ–≤ (–ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º)
        try:
            payload = {
                "question": question,
                "session_id": session_id,
                "stream": True
            }
            
            full_answer = ""
            async with httpx.AsyncClient() as client:
                async with client.stream(
                    "POST",
                    f"{self.base_url}/chats/{chat_id}/completions",
                    json=payload,
                    headers={**self.headers, "Accept": "text/event-stream"}
                ) as response:
                    response.raise_for_status()
                    
                    async for line in response.aiter_lines():
                        if line.startswith('data:'):
                            data_str = line[5:].strip()
                            if data_str in ['true', '[DONE]']:
                                break
                            try:
                                event_data = json.loads(data_str)
                                if event_data.get("code") == 0:
                                    answer_data = event_data.get("data", {})
                                    if isinstance(answer_data, dict):
                                        answer = answer_data.get("answer", "")
                                        if answer:
                                            full_answer += answer
                            except json.JSONDecodeError:
                                continue
            
            return full_answer if full_answer else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
    
    async def ask_question_direct(self, question: str) -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
        # TODO: –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ
        try:
            chat_id = await self.get_chat_id()
            if not chat_id:
                return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç"
            
            session_id = await self.create_session(chat_id)
            if not session_id:
                return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é"
            
            return await self.ask_question_stream(chat_id, session_id, question)
            
        except Exception as e:
            print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ API: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–ê ====================
api_client = FlexarAPIClient()

# ==================== –§–£–ù–ö–¶–ò–ò –ú–ï–ù–Æ ====================

def main_menu():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(
        InlineKeyboardButton("üé¨ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º", callback_data="recommend"),
        InlineKeyboardButton("üé≠ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä", callback_data="choose_genre"),
        InlineKeyboardButton("‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é", callback_data="mood_recommend"),
        InlineKeyboardButton("üìö –ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="my_movies"), 
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    return markup

def genre_menu():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("üî´ –ë–æ–µ–≤–∏–∫", callback_data="genre_action"),
        InlineKeyboardButton("üòÇ –ö–æ–º–µ–¥–∏—è", callback_data="genre_comedy"),
        InlineKeyboardButton("üíñ –î—Ä–∞–º–∞", callback_data="genre_drama"),
        InlineKeyboardButton("üöÄ –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="genre_scifi"),
        InlineKeyboardButton("üëª –£–∂–∞—Å—ã", callback_data="genre_horror"),
        InlineKeyboardButton("üîç –î–µ—Ç–µ–∫—Ç–∏–≤", callback_data="genre_mystery"),
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    )
    return markup

def mood_menu():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("üòä –í–µ—Å–µ–ª–æ–µ", callback_data="mood_happy"),
        InlineKeyboardButton("üò¢ –ì—Ä—É—Å—Ç–Ω–æ–µ", callback_data="mood_sad"),
        InlineKeyboardButton("ü§î –ó–∞–¥—É–º—á–∏–≤–æ–µ", callback_data="mood_thoughtful"),
        InlineKeyboardButton("üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ", callback_data="mood_celebratory"),
        InlineKeyboardButton("üîÆ –¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ", callback_data="mood_mysterious"),
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    )
    return markup

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ====================

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤ üé¨\n\n"
        "–Ø –∏—Å–ø–æ–ª—å–∑—É—é AI —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å–º –ø–æ–¥ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è!",
        reply_markup=main_menu()
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    if call.data == "recommend":
        bot.edit_message_text(
            "üé¨ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º —Ñ–∏–ª—å–º.\n\n"
            "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ '–ö–æ–º–µ–¥–∏—è –ø—Ä–æ –¥—Ä—É–∂–±—É'\n" 
            "‚Ä¢ '–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ —Å –ø—Ä–∏—à–µ–ª—å—Ü–∞–º–∏'\n"
            "‚Ä¢ '–ß—Ç–æ-—Ç–æ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –¥–ª—è –≤–µ—á–µ—Ä–∞'",
            chat_id, message_id,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")
            )
        )
    
    elif call.data == "choose_genre":
        bot.edit_message_text(
            "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
            chat_id, message_id,
            reply_markup=genre_menu()
        )
    
    elif call.data == "mood_recommend":
        bot.edit_message_text(
            "‚≠ê –ö–∞–∫–æ–µ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
            chat_id, message_id,
            reply_markup=mood_menu()
        )
    
    elif call.data == "my_movies":
        bot.edit_message_text(
            "üìö –ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            chat_id, message_id,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")
            )
        )
    
    elif call.data == "help":
        bot.edit_message_text(
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
            "‚Ä¢ üé¨ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º - AI –ø–æ–¥–±–µ—Ä–µ—Ç —Ñ–∏–ª—å–º –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n"
            "‚Ä¢ üé≠ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä - —Ñ–∏–ª—å–º—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∂–∞–Ω—Ä—É\n"
            "‚Ä¢ ‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é - —Ñ–∏–ª—å–º—ã –ø–æ–¥ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
            "‚Ä¢ üìö –ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!",
            chat_id, message_id,
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")
            )
        )
    
    elif call.data == "back_main":
        bot.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            chat_id, message_id,
            reply_markup=main_menu()
        )
    
    elif call.data.startswith("genre_"):
        genre = call.data.replace("genre_", "")
        genre_names = {
            "action": "–±–æ–µ–≤–∏–∫",
            "comedy": "–∫–æ–º–µ–¥–∏—è", 
            "drama": "–¥—Ä–∞–º–∞",
            "scifi": "–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
            "horror": "—É–∂–∞—Å—ã",
            "mystery": "–¥–µ—Ç–µ–∫—Ç–∏–≤"
        }
        
        bot.edit_message_text(
            f"üîç –ò—â—É {genre_names.get(genre, '—Ñ–∏–ª—å–º—ã')}...",
            chat_id, message_id
        )
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
        asyncio.run(send_genre_recommendation(chat_id, genre_names.get(genre, "—Ñ–∏–ª—å–º")))
    
    elif call.data.startswith("mood_"):
        mood = call.data.replace("mood_", "")
        mood_names = {
            "happy": "–≤–µ—Å–µ–ª–æ–µ",
            "sad": "–≥—Ä—É—Å—Ç–Ω–æ–µ", 
            "thoughtful": "–∑–∞–¥—É–º—á–∏–≤–æ–µ",
            "celebratory": "–ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ",
            "mysterious": "—Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ"
        }
        
        bot.edit_message_text(
            f"üîç –ü–æ–¥–±–∏—Ä–∞—é —Ñ–∏–ª—å–º –ø–æ–¥ {mood_names.get(mood, '–≤–∞—à–µ')} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ...",
            chat_id, message_id
        )
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
        asyncio.run(send_mood_recommendation(chat_id, mood_names.get(mood, "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")))

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° API ====================

async def send_genre_recommendation(chat_id: int, genre: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –∂–∞–Ω—Ä—É"""
    question = f"–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–∞ –≤ –∂–∞–Ω—Ä–µ {genre}. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∫–∞–∂–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—é–∂–µ—Ç–∞."
    
    bot.send_chat_action(chat_id, "typing")
    
    try:
        answer = await api_client.ask_question_direct(question)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_answer = f"üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∂–∞–Ω—Ä—É {genre}:\n\n{answer}\n\n–ß—Ç–æ –µ—â–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        
        bot.send_message(
            chat_id,
            formatted_answer,
            reply_markup=main_menu()
        )
        
    except Exception as e:
        bot.send_message(
            chat_id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π üòî",
            reply_markup=main_menu()
        )

async def send_mood_recommendation(chat_id: int, mood: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é"""
    question = f"–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 3 —Ñ–∏–ª—å–º–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è {mood} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∫–∞–∂–∏ –∂–∞–Ω—Ä, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ –ø–æ—á–µ–º—É –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."
    
    bot.send_chat_action(chat_id, "typing")
    
    try:
        answer = await api_client.ask_question_direct(question)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        formatted_answer = f"‚≠ê –§–∏–ª—å–º—ã –¥–ª—è {mood} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:\n\n{answer}\n\n–ù–∞–π–¥–µ–º —á—Ç–æ-—Ç–æ –µ—â–µ?"
        
        bot.send_message(
            chat_id,
            formatted_answer,
            reply_markup=main_menu()
        )
        
    except Exception as e:
        bot.send_message(
            chat_id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π üòî",
            reply_markup=main_menu()
        )

@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Ñ–∏–ª—å–º–æ–≤"""
    user_input = message.text.strip()
    chat_id = message.chat.id
    
    if len(user_input) < 3:
        bot.send_message(
            chat_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –≤—ã –∏—â–µ—Ç–µ üé¨",
            reply_markup=main_menu()
        )
        return
    
    bot.send_chat_action(chat_id, "typing")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
    search_msg = bot.send_message(
        chat_id,
        f"üîç –ò—â—É —Ñ–∏–ª—å–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{user_input}'..."
    )
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
    async def process_request():
        try:
            question = f"–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 3 —Ñ–∏–ª—å–º–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{user_input}'. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∫–∞–∂–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, –∂–∞–Ω—Ä –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—é–∂–µ—Ç–∞. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."
            
            answer = await api_client.ask_question_direct(question)
            
            formatted_answer = f"üéØ –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É '{user_input}':\n\n{answer}\n\n–ü–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?"
            
            bot.edit_message_text(
                formatted_answer,
                chat_id,
                search_msg.message_id,
                reply_markup=main_menu()
            )
            
        except Exception as e:
            bot.edit_message_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤ üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é.",
                chat_id,
                search_msg.message_id,
                reply_markup=main_menu()
            )
    
    asyncio.run(process_request())

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

if __name__ == "__main__":
    print("üé¨ –ë–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ñ–∏–ª—å–º–æ–≤ –∑–∞–ø—É—â–µ–Ω! üöÄ")
    print("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    bot.infinity_polling()