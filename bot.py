import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
import json
import time

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
BOT_TOKEN = "8220896552:AAFqZ28ylYmItLQLmQHOqTGWDCRtbSLwD5U"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Flexar API
FLEXAR_BASE_URL = "https://vibeathon.flexar.ai"
FLEXAR_API_KEY = "flexar-ExNzcwMDA2YWI0NzExZjA5NzBlMGViYj"
FLEXAR_CHAT_ID = "15660a30ab4811f094ae0ebb9de0575e"

bot = telebot.TeleBot(BOT_TOKEN)

# ==================== –ü–†–û–°–¢–û–ô –ö–õ–ò–ï–ù–¢ API ====================

class SimpleFlexarClient:
    def __init__(self):
        self.base_url = FLEXAR_BASE_URL
        self.headers = {
            "Authorization": f"Bearer {FLEXAR_API_KEY}",
            "Content-Type": "application/json"
        }
    
    def ask_question(self, question: str, max_retries: int = 3) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        
        for attempt in range(max_retries):
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
                session_response = requests.post(
                    f"{self.base_url}/api/v1/chats/{FLEXAR_CHAT_ID}/sessions",
                    headers=self.headers,
                    json={"name": f"Telegram_{int(time.time())}"},
                    timeout=30
                )
                
                if session_response.status_code != 200:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {session_response.status_code}")
                    continue
                    
                session_data = session_response.json()
                if session_data.get("code") != 0:
                    print(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏: {session_data}")
                    continue
                    
                session_id = session_data["data"]["id"]
                
                # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
                payload = {
                    "question": question,
                    "session_id": session_id,
                    "stream": False
                }
                
                response = requests.post(
                    f"{self.base_url}/api/v1/chats/{FLEXAR_CHAT_ID}/completions",
                    headers=self.headers,
                    json=payload,
                    timeout=60
                )
                
                if response.status_code == 503:
                    print(f"–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503), –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                    time.sleep(2)
                    continue
                    
                if response.status_code != 200:
                    print(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
                    continue
                    
                data = response.json()
                if data.get("code") == 0:
                    answer_data = data.get("data", {})
                    if isinstance(answer_data, dict):
                        return answer_data.get("answer", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
                
            except requests.exceptions.Timeout:
                print(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                time.sleep(2)
            except requests.exceptions.ConnectionError:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                time.sleep(2)
            except Exception as e:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                time.sleep(2)
        
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
api_client = SimpleFlexarClient()

# ==================== –ò–ì–†–ê "–£–ì–ê–î–ê–ô –§–ò–õ–¨–ú" ====================

# –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_conversations = {}

def get_answer_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="answer_yes"),
        InlineKeyboardButton("üü° –°–∫–æ—Ä–µ–µ –¥–∞", callback_data="answer_probably_yes"),
        InlineKeyboardButton("‚ö™Ô∏è –ù–µ —É–≤–µ—Ä–µ–Ω", callback_data="answer_not_sure"),
        InlineKeyboardButton("üü† –°–∫–æ—Ä–µ–µ –Ω–µ—Ç", callback_data="answer_probably_no"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="answer_no"),
        InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")
    )
    return markup

def get_start_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã"""
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å —É–≥–∞–¥—ã–≤–∞—Ç—å!", callback_data="start_game")
    )
    return markup

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é
    if user_id in user_conversations:
        del user_conversations[user_id]
    
    welcome_text = (
        "üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø –ö–∏–Ω–∞—Ç–æ—Ä - –≤–æ–ª—à–µ–±–Ω—ã–π —É–≥–∞–¥—ã–≤–∞—Ç–µ–ª—å —Ñ–∏–ª—å–º–æ–≤! üßô‚Äç‚ôÇÔ∏è\n\n"
        "**–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:**\n"
        "1. –ó–∞–≥–∞–¥–∞–π –õ–Æ–ë–û–ô —Ñ–∏–ª—å–º\n"
        "2. –û—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∫–Ω–æ–ø–∫–∞–º–∏\n"
        "3. –Ø –ø–æ–ø—Ä–æ–±—É—é —É–≥–∞–¥–∞—Ç—å —Ç–≤–æ–π —Ñ–∏–ª—å–º!\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–∏–π —Å–µ–∞–Ω—Å?"
    )
    
    bot.send_message(chat_id, welcome_text, reply_markup=get_start_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    if call.data == "start_game":
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        start_game(chat_id, user_id)
    
    elif call.data == "new_game":
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        start_game(chat_id, user_id)
    
    elif call.data.startswith("answer_"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answer_type = call.data.replace("answer_", "")
        answer_map = {
            "yes": "–î–∞",
            "probably_yes": "–°–∫–æ—Ä–µ–µ –¥–∞", 
            "not_sure": "–ù–µ —É–≤–µ—Ä–µ–Ω",
            "probably_no": "–°–∫–æ—Ä–µ–µ –Ω–µ—Ç",
            "no": "–ù–µ—Ç"
        }
        
        answer_text = answer_map.get(answer_type, answer_type)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(chat_id, f"‚û°Ô∏è –¢–≤–æ–π –æ—Ç–≤–µ—Ç: {answer_text}")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
        continue_game(chat_id, user_id, answer_text)

def start_game(chat_id, user_id):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    user_conversations[user_id] = []
    
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    first_message = (
        "–û—Ç–ª–∏—á–Ω–æ! üßô‚Äç‚ôÇÔ∏è –ó–∞–≥–∞–¥–∞–π –ª—é–±–æ–π —Ñ–∏–ª—å–º –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –º–∞–≥–∏–∏...\n\n"
        "–ù–∞—á–∏–Ω–∞—é –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤:"
    )
    
    bot.send_message(chat_id, first_message)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    ask_next_question(chat_id, user_id)

def ask_next_question(chat_id, user_id):
    """–ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    bot.send_chat_action(chat_id, "typing")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        history = user_conversations.get(user_id, [])
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        if not history:
            prompt = "–¢—ã - –ö–∏–Ω–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–≥–∞–¥—ã–≤–∞–µ—Ç —Ñ–∏–ª—å–º—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥–∞–¥–∞–ª –Ω–∏—á–µ–≥–æ, —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ —Ñ–∏–ª—å–º –ø–æ –Ω–∞–≤–æ–¥—è—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º). –ù–∞—á–Ω–∏ –∑–∞–¥–∞–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Ñ–∏–ª—å–º–µ. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –¢–û–õ–¨–ö–û –î–∞/–ù–µ—Ç/–°–∫–æ—Ä–µ–µ –¥–∞/–°–∫–æ—Ä–µ–µ –Ω–µ—Ç/–ù–µ —É–≤–µ—Ä–µ–Ω."
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            conversation_text = "\n".join(history)
            prompt = f"–ü—Ä–æ–¥–æ–ª–∂–∏ —É–≥–∞–¥—ã–≤–∞—Ç—å —Ñ–∏–ª—å–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥–∞–¥–∞–ª –Ω–∏—á–µ–≥–æ, —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –Ω–µ–≥–æ —Ñ–∏–ª—å–º –ø–æ –Ω–∞–≤–æ–¥—è—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º) –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏:\n{conversation_text}\n\n–ó–∞–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å (—Ç–æ–ª—å–∫–æ –î–∞/–°–∫–æ—Ä–µ–µ –¥–∞/ –ù–µ —É–≤–µ—Ä–µ–Ω/ –°–∫–æ—Ä–µ–µ –Ω–µ—Ç/ –Ω–µ—Ç) –æ —Ñ–∏–ª—å–º–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª —á—Ç–æ —Ç—ã —É–≥–∞–¥–∞–ª –ø—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É:"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        question = api_client.ask_question(prompt)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_conversations[user_id].append(f"–ö–∏–Ω–∞—Ç–æ—Ä: {question}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(chat_id, question, reply_markup=get_answer_keyboard())
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–æ–ø—Ä–æ—Å –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        fallback_questions = [
            "–≠—Ç–æ—Ç —Ñ–∏–ª—å–º –≤—ã—à–µ–ª –ø–æ—Å–ª–µ 2010 –≥–æ–¥–∞?",
            "–≠—Ç–æ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ñ–∏–ª—å–º?",
            "–ñ–∞–Ω—Ä —Ñ–∏–ª—å–º–∞ - –∫–æ–º–µ–¥–∏—è?",
            "–í –≥–ª–∞–≤–Ω–æ–π —Ä–æ–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫—Ç–µ—Ä?",
            "–§–∏–ª—å–º –ø–æ–ª—É—á–∏–ª –∫–∞–∫–∏–µ-—Ç–æ –Ω–∞–≥—Ä–∞–¥—ã?",
            "–≠—Ç–æ —ç–∫—Ä–∞–Ω–∏–∑–∞—Ü–∏—è –∫–Ω–∏–≥–∏?",
            "–£ —Ñ–∏–ª—å–º–∞ –µ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è?"
        ]
        import random
        question = random.choice(fallback_questions)
        user_conversations[user_id].append(f"–ö–∏–Ω–∞—Ç–æ—Ä: {question}")
        bot.send_message(chat_id, question, reply_markup=get_answer_keyboard())

def continue_game(chat_id, user_id, user_answer):
    """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_conversations[user_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_answer}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ —É–≥–∞–¥—ã–≤–∞—Ç—å —Ñ–∏–ª—å–º
    history = user_conversations.get(user_id, [])
    if len(history) >= 6:  # –ü–æ—Å–ª–µ 3 –≤–æ–ø—Ä–æ—Å–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–≥–∞–¥–∞—Ç—å
        # –°–ª—É—á–∞–π–Ω–æ —Ä–µ—à–∞–µ–º, –ø—ã—Ç–∞—Ç—å—Å—è –ª–∏ —É–≥–∞–¥–∞—Ç—å
        import random
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–≥–∞–¥–∞—Ç—å
            try_to_guess(chat_id, user_id)
            return
    
    # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    ask_next_question(chat_id, user_id)

def try_to_guess(chat_id, user_id):
    """–ü—ã—Ç–∞–µ—Ç—Å—è —É–≥–∞–¥–∞—Ç—å —Ñ–∏–ª—å–º"""
    bot.send_chat_action(chat_id, "typing")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        history = user_conversations.get(user_id, [])
        conversation_text = "\n".join(history)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ —É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        prompt = f"–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —É–≥–∞–¥–∞–π, –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –∑–∞–≥–∞–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{conversation_text}\n\n–ù–∞–∑–æ–≤–∏ —Ñ–∏–ª—å–º –∏ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É —Ç—ã —Ç–∞–∫ —Ä–µ—à–∏–ª:"
        
        guess = api_client.ask_question(prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        bot.send_message(chat_id, f"üéØ –î—É–º–∞—é, —è –∑–Ω–∞—é!\n\n{guess}\n\n–Ø —É–≥–∞–¥–∞–ª?", reply_markup=get_answer_keyboard())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_conversations[user_id].append(f"–ö–∏–Ω–∞—Ç–æ—Ä: {guess}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è: {e}")
        # –ó–∞–ø–∞—Å–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ
        fallback_guesses = [
            "–î—É–º–∞—é, —Ç—ã –∑–∞–≥–∞–¥–∞–ª '–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä' - —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ –ø—Ä–æ –∫–æ—Å–º–æ—Å –∏ –≤—Ä–µ–º—è!",
            "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ '–§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø' - —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ –∂–∏–∑–Ω–∏!",
            "–ù–∞–≤–µ—Ä–Ω–æ–µ, —Ç—ã –∑–∞–≥–∞–¥–∞–ª '–ú–∞—Ç—Ä–∏—Ü—É' - –∫—É–ª—å—Ç–æ–≤–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ –ø—Ä–æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å!",
            "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ '–ü–æ–±–µ–≥ –∏–∑ –®–æ—É—à–µ–Ω–∫–∞' - –¥—Ä–∞–º–∞ –æ –Ω–∞–¥–µ–∂–¥–µ –∏ —Å–≤–æ–±–æ–¥–µ!"
        ]
        import random
        guess = random.choice(fallback_guesses)
        bot.send_message(chat_id, f"üéØ –î—É–º–∞—é, —è –∑–Ω–∞—é!\n\n{guess}\n\n–Ø —É–≥–∞–¥–∞–ª?", reply_markup=get_answer_keyboard())
        user_conversations[user_id].append(f"–ö–∏–Ω–∞—Ç–æ—Ä: {guess}")

@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫)"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    bot.send_message(
        chat_id, 
        "–î–ª—è –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤! üéÆ\n\n–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É?", 
        reply_markup=get_start_keyboard()
    )

# ==================== –ó–ê–ü–£–°–ö ====================

if __name__ == "__main__":
    print("üé¨ –ö–∏–Ω–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω! üßô‚Äç‚ôÇÔ∏è")
    print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∏–≥—Ä–∞—Ç—å –≤ —É–≥–∞–¥–∞–π–∫—É —Ñ–∏–ª—å–º–æ–≤...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
    try:
        test_result = api_client.ask_question("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print(f"‚úÖ API —Å—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ö†Ô∏è API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–ø–∞—Å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏")
    
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ!")
    bot.infinity_polling()